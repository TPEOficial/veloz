import{_ as e,c as a,o as r,a4 as i}from"./chunks/framework.ttppV29E.js";const h=JSON.parse('{"title":"Programming Language Types","description":"Learn the types of languages.","frontmatter":{"title":"Programming Language Types","description":"Learn the types of languages."},"headers":[],"relativePath":"en/learn/development/concepts/scratch/programming-language-types.md","filePath":"en/learn/development/concepts/scratch/programming-language-types.md","lastUpdated":1716804882000}'),t={name:"en/learn/development/concepts/scratch/programming-language-types.md"},n=i('<h1 id="programming-language-types" tabindex="-1">Programming Language Types <a class="header-anchor" href="#programming-language-types" aria-label="Permalink to &quot;Programming Language Types&quot;">​</a></h1><h2 id="high-level-programming-languages" tabindex="-1">High-Level Programming Languages <a class="header-anchor" href="#high-level-programming-languages" aria-label="Permalink to &quot;High-Level Programming Languages&quot;">​</a></h2><p>High-level programming languages are closer to human language and easier to read and write. Some examples include:</p><ul><li>Python - created by <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank">Guido van Rossum</a>.</li><li>Java - developed by <a href="https://en.wikipedia.org/wiki/James_Gosling" target="_blank">James Gosling</a> and others at <a href="https://en.wikipedia.org/wiki/Sun_Microsystems" target="_blank">Sun Microsystems</a>.</li><li>C++ - created by <a href="https://en.wikipedia.org/wiki/Bjarne_Stroustrup" target="_blank">Bjarne Stroustrup</a> at <a href="https://en.wikipedia.org/wiki/Bell_Labs" target="_blank">Bell Labs</a>.</li><li>JavaScript - developed by <a href="https://en.wikipedia.org/wiki/Brendan_Eich" target="_blank">Brendan Eich</a> at <a href="https://en.wikipedia.org/wiki/Netscape" target="_blank">Netscape</a>.</li></ul><h2 id="low-level-programming-languages" tabindex="-1">Low-Level Programming Languages <a class="header-anchor" href="#low-level-programming-languages" aria-label="Permalink to &quot;Low-Level Programming Languages&quot;">​</a></h2><p>Low-level languages are closer to computer architecture and more challenging to read and write. Some examples include:</p><ul><li>Assembly - each instruction corresponds to a CPU operation.</li><li>Machine Code - sequences of ones and zeros that the CPU can directly understand.</li></ul><h2 id="declarative-vs-imperative-languages" tabindex="-1">Declarative vs. Imperative Languages <a class="header-anchor" href="#declarative-vs-imperative-languages" aria-label="Permalink to &quot;Declarative vs. Imperative Languages&quot;">​</a></h2><p>Declarative languages describe what should be done, while imperative languages describe how to do it. Examples include:</p><ul><li>Declarative: SQL for databases, HTML for web pages.</li><li>Imperative: C, Java, Python.</li></ul><h2 id="interpreted-vs-compiled-languages" tabindex="-1">Interpreted vs. Compiled Languages <a class="header-anchor" href="#interpreted-vs-compiled-languages" aria-label="Permalink to &quot;Interpreted vs. Compiled Languages&quot;">​</a></h2><p>Interpreted languages run directly, while compiled languages are translated to machine code first. Examples include:</p><ul><li>Interpreted: Python, JavaScript.</li><li>Compiled: C, C++, Java.</li></ul><h2 id="multi-paradigm-languages" tabindex="-1">Multi-Paradigm Languages <a class="header-anchor" href="#multi-paradigm-languages" aria-label="Permalink to &quot;Multi-Paradigm Languages&quot;">​</a></h2><p><em>&quot;A multi-paradigm programming language is one that allows the implementation of different programming styles. This means that you can write code in several paradigms, such as object-oriented programming, functional programming, imperative programming, among others, all within the same language. For example, in a multi-paradigm language like Python, you can write object-oriented, functional and imperative code as needed in your program. The same is true for other languages such as JavaScript and C++.&quot;</em></p><p>Some languages support multiple programming paradigms:</p><ul><li>C++ - supports object-oriented and generic programming.</li><li>Python - supports object-oriented, functional, and imperative programming.</li><li>JavaScript - supports object-oriented, functional, and prototype-based programming.</li></ul>',17),l=[n];function o(g,s,p,m,d,u){return r(),a("div",null,l)}const v=e(t,[["render",o]]);export{h as __pageData,v as default};
