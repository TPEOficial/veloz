import{_ as e,c as a,o as i,a4 as o}from"./chunks/framework.CHka9bPJ.js";const h=JSON.parse('{"title":"Tipos de lenguajes de programación","description":"Aprende los tipos de lenguajes.","frontmatter":{"title":"Tipos de lenguajes de programación","description":"Aprende los tipos de lenguajes.","next":{"link":"/unrelated-page/","label":"Check out this other page"}},"headers":[],"relativePath":"es/learn/development/concepts/scratch/programming-language-types.md","filePath":"es/learn/development/concepts/scratch/programming-language-types.md","lastUpdated":1716804882000}'),r={name:"es/learn/development/concepts/scratch/programming-language-types.md"},n=o('<h3 id="lenguajes-de-programacion-de-alto-nivel" tabindex="-1">Lenguajes de programación de alto nivel <a class="header-anchor" href="#lenguajes-de-programacion-de-alto-nivel" aria-label="Permalink to &quot;Lenguajes de programación de alto nivel&quot;">​</a></h3><p>Los lenguajes de programación de alto nivel son más cercanos al lenguaje humano y más fáciles de leer y escribir. Algunos ejemplos son:</p><ul><li>Python - creado por <a href="https://es.wikipedia.org/wiki/Guido_van_Rossum" target="_blank">Guido van Rossum</a>.</li><li>Java - desarrollado por <a href="https://es.wikipedia.org/wiki/James_Gosling" target="_blank">James Gosling</a> y otros en <a href="https://es.wikipedia.org/wiki/Sun_Microsystems" target="_blank">Sun Microsystems</a>.</li><li>C++ - creado por <a href="https://es.wikipedia.org/wiki/Bjarne_Stroustrup" target="_blank">Bjarne Stroustrup</a> en <a href="https://es.wikipedia.org/wiki/Bell_Labs" target="_blank">Bell Labs</a>.</li><li>JavaScript - desarrollado por <a href="https://en.wikipedia.org/wiki/Brendan_Eich" target="_blank">Brendan Eich</a> en <a href="https://es.wikipedia.org/wiki/Netscape_Communications_Corporation" target="_blank">Netscape</a>.</li></ul><h3 id="lenguajes-de-programacion-de-bajo-nivel" tabindex="-1">Lenguajes de programación de bajo nivel <a class="header-anchor" href="#lenguajes-de-programacion-de-bajo-nivel" aria-label="Permalink to &quot;Lenguajes de programación de bajo nivel&quot;">​</a></h3><p>Los lenguajes de bajo nivel están más cerca de la arquitectura informática y son más difíciles de leer y escribir. Algunos ejemplos son:</p><ul><li>Ensamblador - cada instrucción corresponde a una operación de la CPU.</li><li>Código máquina: secuencias de unos y ceros que la CPU puede entender directamente.</li></ul><h3 id="lenguajes-declarativos-frente-a-imperativos" tabindex="-1">Lenguajes declarativos frente a imperativos <a class="header-anchor" href="#lenguajes-declarativos-frente-a-imperativos" aria-label="Permalink to &quot;Lenguajes declarativos frente a imperativos&quot;">​</a></h3><p>Los lenguajes declarativos describen lo que debe hacerse, mientras que los imperativos describen cómo hacerlo. Algunos ejemplos son:</p><ul><li>Declarativos: SQL para bases de datos, HTML para páginas web.</li><li>Imperativos: C, Java, Python.</li></ul><h3 id="lenguajes-interpretados-frente-a-lenguajes-compilados" tabindex="-1">Lenguajes interpretados frente a lenguajes compilados <a class="header-anchor" href="#lenguajes-interpretados-frente-a-lenguajes-compilados" aria-label="Permalink to &quot;Lenguajes interpretados frente a lenguajes compilados&quot;">​</a></h3><p>Los lenguajes interpretados se ejecutan directamente, mientras que los compilados se traducen primero a código máquina. Algunos ejemplos son:</p><ul><li>Interpretados: Python, JavaScript.</li><li>Compilados: C, C++, Java.</li></ul><h3 id="lenguajes-multiparadigma" tabindex="-1">Lenguajes multiparadigma <a class="header-anchor" href="#lenguajes-multiparadigma" aria-label="Permalink to &quot;Lenguajes multiparadigma&quot;">​</a></h3><p><em>&quot;Un lenguaje de programación multiparadigma es aquel que permite la implementación de diferentes estilos de programación. Esto significa que puedes escribir código en varios paradigmas, como programación orientada a objetos, programación funcional, programación imperativa, entre otros, todo dentro del mismo lenguaje. Por ejemplo, en un lenguaje multiparadigma como Python, puedes escribir código orientado a objetos, funcional e imperativo según sea necesario en tu programa. Lo mismo ocurre con otros lenguajes como JavaScript y C++.&quot;</em></p><p>Algunos lenguajes admiten múltiples paradigmas de programación:</p><ul><li>C++ - soporta programación orientada a objetos y genérica.</li><li>Python - admite programación orientada a objetos, funcional e imperativa.</li><li>JavaScript - admite programación orientada a objetos, funcional y basada en prototipos.</li></ul>',16),s=[n];function t(l,d,p,c,u,m){return i(),a("div",null,s)}const j=e(r,[["render",t]]);export{h as __pageData,j as default};
